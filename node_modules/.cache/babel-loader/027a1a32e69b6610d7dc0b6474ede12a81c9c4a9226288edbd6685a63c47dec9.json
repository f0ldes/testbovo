{"ast":null,"code":"import { employeeTokenCheckApi, employerTokenCheckApi, fetchData } from \"./utilsFetch\";\nconst verifyToken = async navigate => {\n  const fullUrl = window.location.href;\n  console.log('this is the full url:', fullUrl);\n  const isValidFullUrl = fullUrl.includes('http://localhost:3000/valid2.html');\n  console.log(fullUrl);\n  console.log(isValidFullUrl);\n  if (isValidFullUrl) {\n    const regex = /[?&]token=(ER|EE)([a-zA-Z0-9]+)/;\n    const matches = fullUrl.match(regex);\n    console.log('Matches:', matches);\n    if (matches) {\n      const userType = matches[1];\n      const token = matches[2];\n      console.log('User Type:', userType);\n      console.log('Token:', token);\n      if (userType === 'EE') {\n        let finalToken = 'EE' + token;\n        console.log('This is the final token:', finalToken);\n        let response = await fetchData(finalToken, employeeTokenCheckApi);\n        console.log('Employee Token Response:', response);\n        if (response.msgCode === 200) {\n          navigate('/employeeVerify');\n        } else {\n          console.error('Invalid employee token.');\n        }\n      } else if (userType === 'ER') {\n        let fnalToken = 'ER' + token;\n        let response = await fetchData(token, employerTokenCheckApi);\n        console.log('Employer Token Response:', response);\n        if (response.msgCode === 200) {\n          navigate('/employerVerify');\n        } else {\n          console.error('Invalid employer token.');\n        }\n      }\n    } else {\n      console.error('Invalid or missing token.');\n    }\n  } else {\n    console.log('URL does not match the expected pattern.');\n  }\n};\nexport default verifyToken;","map":{"version":3,"names":["employeeTokenCheckApi","employerTokenCheckApi","fetchData","verifyToken","navigate","fullUrl","window","location","href","console","log","isValidFullUrl","includes","regex","matches","match","userType","token","finalToken","response","msgCode","error","fnalToken"],"sources":["/Users/foldes/abovo/preReg/src/utils/utilsVerify.ts"],"sourcesContent":["import { employeeTokenCheckApi, employerTokenCheckApi, fetchData } from \"./utilsFetch\";\n\nconst verifyToken = async ( navigate: (path: string) => void ) => {\n    const fullUrl = window.location.href;\n    console.log('this is the full url:', fullUrl);\n\n    const isValidFullUrl = fullUrl.includes('http://localhost:3000/valid2.html')\n\n    console.log(fullUrl);\n    console.log(isValidFullUrl);\n\n    if (isValidFullUrl) {\n        const regex = /[?&]token=(ER|EE)([a-zA-Z0-9]+)/;\n        const matches = fullUrl.match(regex);\n\n        console.log('Matches:', matches);\n\n        if (matches) {\n            const userType = matches[1];\n            const token = matches[2];\n            console.log('User Type:', userType);\n            console.log('Token:', token);\n\n            if (userType === 'EE') {\n                let finalToken = 'EE' + token;\n                console.log('This is the final token:', finalToken);\n                let response = await fetchData(finalToken, employeeTokenCheckApi);\n                console.log('Employee Token Response:', response);\n                if (response.msgCode === 200) {\n                    navigate('/employeeVerify');\n                } else {\n                    console.error('Invalid employee token.');\n                }\n            } else if (userType === 'ER') {\n                let fnalToken = 'ER' + token;\n                let response = await fetchData(token, employerTokenCheckApi);\n                console.log('Employer Token Response:', response);\n                if (response.msgCode === 200) {\n                    navigate('/employerVerify');\n                } else {\n                    console.error('Invalid employer token.');\n                }\n            }\n        } else {\n            console.error('Invalid or missing token.');\n        }\n    } else {\n        console.log('URL does not match the expected pattern.');\n    }\n};\n\nexport default verifyToken;"],"mappings":"AAAA,SAASA,qBAAqB,EAAEC,qBAAqB,EAAEC,SAAS,QAAQ,cAAc;AAEtF,MAAMC,WAAW,GAAG,MAAQC,QAAgC,IAAM;EAC9D,MAAMC,OAAO,GAAGC,MAAM,CAACC,QAAQ,CAACC,IAAI;EACpCC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEL,OAAO,CAAC;EAE7C,MAAMM,cAAc,GAAGN,OAAO,CAACO,QAAQ,CAAC,mCAAmC,CAAC;EAE5EH,OAAO,CAACC,GAAG,CAACL,OAAO,CAAC;EACpBI,OAAO,CAACC,GAAG,CAACC,cAAc,CAAC;EAE3B,IAAIA,cAAc,EAAE;IAChB,MAAME,KAAK,GAAG,iCAAiC;IAC/C,MAAMC,OAAO,GAAGT,OAAO,CAACU,KAAK,CAACF,KAAK,CAAC;IAEpCJ,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEI,OAAO,CAAC;IAEhC,IAAIA,OAAO,EAAE;MACT,MAAME,QAAQ,GAAGF,OAAO,CAAC,CAAC,CAAC;MAC3B,MAAMG,KAAK,GAAGH,OAAO,CAAC,CAAC,CAAC;MACxBL,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEM,QAAQ,CAAC;MACnCP,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEO,KAAK,CAAC;MAE5B,IAAID,QAAQ,KAAK,IAAI,EAAE;QACnB,IAAIE,UAAU,GAAG,IAAI,GAAGD,KAAK;QAC7BR,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEQ,UAAU,CAAC;QACnD,IAAIC,QAAQ,GAAG,MAAMjB,SAAS,CAACgB,UAAU,EAAElB,qBAAqB,CAAC;QACjES,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAES,QAAQ,CAAC;QACjD,IAAIA,QAAQ,CAACC,OAAO,KAAK,GAAG,EAAE;UAC1BhB,QAAQ,CAAC,iBAAiB,CAAC;QAC/B,CAAC,MAAM;UACHK,OAAO,CAACY,KAAK,CAAC,yBAAyB,CAAC;QAC5C;MACJ,CAAC,MAAM,IAAIL,QAAQ,KAAK,IAAI,EAAE;QAC1B,IAAIM,SAAS,GAAG,IAAI,GAAGL,KAAK;QAC5B,IAAIE,QAAQ,GAAG,MAAMjB,SAAS,CAACe,KAAK,EAAEhB,qBAAqB,CAAC;QAC5DQ,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAES,QAAQ,CAAC;QACjD,IAAIA,QAAQ,CAACC,OAAO,KAAK,GAAG,EAAE;UAC1BhB,QAAQ,CAAC,iBAAiB,CAAC;QAC/B,CAAC,MAAM;UACHK,OAAO,CAACY,KAAK,CAAC,yBAAyB,CAAC;QAC5C;MACJ;IACJ,CAAC,MAAM;MACHZ,OAAO,CAACY,KAAK,CAAC,2BAA2B,CAAC;IAC9C;EACJ,CAAC,MAAM;IACHZ,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;EAC3D;AACJ,CAAC;AAED,eAAeP,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}