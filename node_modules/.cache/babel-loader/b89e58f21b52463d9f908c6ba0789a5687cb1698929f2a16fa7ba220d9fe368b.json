{"ast":null,"code":"import { employeeTokenCheckApi, employerTokenCheckApi, fetchData } from \"./utilsFetch\";\nconst verifyToken = async navigate => {\n  const fullUrl = window.location.href;\n  //console.log('this is the full url:', fullUrl);\n\n  const isValidFullUrl = fullUrl.includes('https://abovo.jobs/valid2.html');\n\n  //console.log(fullUrl);\n  //console.log(isValidFullUrl);\n\n  if (isValidFullUrl) {\n    const regex = /[?&]token=(ER|EE)([a-zA-Z0-9]+)/;\n    const matches = fullUrl.match(regex);\n\n    //console.log('Matches:', matches);\n\n    if (matches) {\n      const userType = matches[1];\n      const token = matches[2];\n      //console.log('User Type:', userType);\n      //console.log('Token:', token);\n\n      if (userType === 'EE') {\n        let finalToken = 'EE' + token;\n        //console.log('This is the final token:', finalToken);\n        let response = await fetchData({\n          token: finalToken\n        }, employeeTokenCheckApi);\n        //console.log('Employee Token Response:', response);\n        if (response.msgCode === 200) {\n          navigate('/employeeVerify');\n        } else {\n          console.error('Invalid employee token.');\n        }\n      } else if (userType === 'ER') {\n        let fnalToken = 'ER' + token;\n        let response = await fetchData({\n          token: fnalToken\n        }, employerTokenCheckApi);\n        //console.log('Employer Token Response:', response);\n        if (response.msgCode === 200) {\n          navigate('/employerVerify');\n        } else {\n          console.error('Invalid employer token.');\n        }\n      }\n    } else {\n      console.error('Invalid or missing token.');\n    }\n  } else {\n    console.log('URL does not match the expected pattern.');\n  }\n};\nexport default verifyToken;","map":{"version":3,"names":["employeeTokenCheckApi","employerTokenCheckApi","fetchData","verifyToken","navigate","fullUrl","window","location","href","isValidFullUrl","includes","regex","matches","match","userType","token","finalToken","response","msgCode","console","error","fnalToken","log"],"sources":["/Users/foldes/abovo/preReg/src/utils/utilsVerify.ts"],"sourcesContent":["import { employeeTokenCheckApi, employerTokenCheckApi, fetchData } from \"./utilsFetch\";\n\nconst verifyToken = async ( navigate: (path: string) => void ) => {\n    const fullUrl = window.location.href;\n    //console.log('this is the full url:', fullUrl);\n\n    const isValidFullUrl = fullUrl.includes('https://abovo.jobs/valid2.html')\n\n    //console.log(fullUrl);\n    //console.log(isValidFullUrl);\n\n    if (isValidFullUrl) {\n        const regex = /[?&]token=(ER|EE)([a-zA-Z0-9]+)/;\n        const matches = fullUrl.match(regex);\n\n        //console.log('Matches:', matches);\n\n        if (matches) {\n            const userType = matches[1];\n            const token = matches[2];\n            //console.log('User Type:', userType);\n            //console.log('Token:', token);\n\n            if (userType === 'EE') {\n                let finalToken = 'EE' + token;\n                //console.log('This is the final token:', finalToken);\n                let response = await fetchData({ token: finalToken }, employeeTokenCheckApi);\n                //console.log('Employee Token Response:', response);\n                if (response.msgCode === 200) {\n                    navigate('/employeeVerify');\n                } else {\n                    console.error('Invalid employee token.');\n                }\n            } else if (userType === 'ER') {\n                let fnalToken = 'ER' + token;\n                let response = await fetchData({token: fnalToken}, employerTokenCheckApi);\n                //console.log('Employer Token Response:', response);\n                if (response.msgCode === 200) {\n                    navigate('/employerVerify');\n                } else {\n                    console.error('Invalid employer token.');\n                }\n            }\n        } else {\n            console.error('Invalid or missing token.');\n        }\n    } else {\n        console.log('URL does not match the expected pattern.');\n    }\n};\n\nexport default verifyToken;"],"mappings":"AAAA,SAASA,qBAAqB,EAAEC,qBAAqB,EAAEC,SAAS,QAAQ,cAAc;AAEtF,MAAMC,WAAW,GAAG,MAAQC,QAAgC,IAAM;EAC9D,MAAMC,OAAO,GAAGC,MAAM,CAACC,QAAQ,CAACC,IAAI;EACpC;;EAEA,MAAMC,cAAc,GAAGJ,OAAO,CAACK,QAAQ,CAAC,gCAAgC,CAAC;;EAEzE;EACA;;EAEA,IAAID,cAAc,EAAE;IAChB,MAAME,KAAK,GAAG,iCAAiC;IAC/C,MAAMC,OAAO,GAAGP,OAAO,CAACQ,KAAK,CAACF,KAAK,CAAC;;IAEpC;;IAEA,IAAIC,OAAO,EAAE;MACT,MAAME,QAAQ,GAAGF,OAAO,CAAC,CAAC,CAAC;MAC3B,MAAMG,KAAK,GAAGH,OAAO,CAAC,CAAC,CAAC;MACxB;MACA;;MAEA,IAAIE,QAAQ,KAAK,IAAI,EAAE;QACnB,IAAIE,UAAU,GAAG,IAAI,GAAGD,KAAK;QAC7B;QACA,IAAIE,QAAQ,GAAG,MAAMf,SAAS,CAAC;UAAEa,KAAK,EAAEC;QAAW,CAAC,EAAEhB,qBAAqB,CAAC;QAC5E;QACA,IAAIiB,QAAQ,CAACC,OAAO,KAAK,GAAG,EAAE;UAC1Bd,QAAQ,CAAC,iBAAiB,CAAC;QAC/B,CAAC,MAAM;UACHe,OAAO,CAACC,KAAK,CAAC,yBAAyB,CAAC;QAC5C;MACJ,CAAC,MAAM,IAAIN,QAAQ,KAAK,IAAI,EAAE;QAC1B,IAAIO,SAAS,GAAG,IAAI,GAAGN,KAAK;QAC5B,IAAIE,QAAQ,GAAG,MAAMf,SAAS,CAAC;UAACa,KAAK,EAAEM;QAAS,CAAC,EAAEpB,qBAAqB,CAAC;QACzE;QACA,IAAIgB,QAAQ,CAACC,OAAO,KAAK,GAAG,EAAE;UAC1Bd,QAAQ,CAAC,iBAAiB,CAAC;QAC/B,CAAC,MAAM;UACHe,OAAO,CAACC,KAAK,CAAC,yBAAyB,CAAC;QAC5C;MACJ;IACJ,CAAC,MAAM;MACHD,OAAO,CAACC,KAAK,CAAC,2BAA2B,CAAC;IAC9C;EACJ,CAAC,MAAM;IACHD,OAAO,CAACG,GAAG,CAAC,0CAA0C,CAAC;EAC3D;AACJ,CAAC;AAED,eAAenB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}